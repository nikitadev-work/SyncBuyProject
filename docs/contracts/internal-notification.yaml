openapi: 3.1.0
info:
  title: Notification (Internal) API
  version: 1.2.0
  description: >
    Сервис уведомлений SyncBuy. Принимает внутренние команды на отправку сообщений (Telegram в MVP),
    поддерживает идемпотентность через заголовок Idempotence-Key, хранит и выдаёт статус доставки.
servers:
  - url: http://notification.internal/v1

tags:
  - name: Health
  - name: Send
  - name: Status
  - name: Templates

security:
  - internalAuth: []

paths:
  # ------------------------ HEALTH ------------------------
  /internal/health:
    get:
      tags: [Health]
      summary: Health-чек сервиса
      security:
        - internalAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ok }
                  version: { type: string, example: 1.2.0 }

  # ======================== ОТПРАВКА ========================
  /internal/notify/send:
    post:
      tags: [Send]
      summary: Отправить уведомление пользователю в указанный канал
      description: >
        Ставит задание на отправку сообщения. Операция идемпотентна по заголовку Idempotence-Key:
        повтор с тем же ключом вернёт тот же message_id и не создаст дубль.
      security:
        - internalAuth: []
      parameters:
        - $ref: '#/components/parameters/IdempotenceKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendRequest'
            examples:
              payment_success:
                value:
                  user_id: "11111111-1111-1111-1111-111111111111"
                  channel: "telegram"
                  template: "payment.success"
                  params:
                    amount: "1200.00"
                    currency: "RUB"
      responses:
        '202':
          description: Accepted (задание поставлено)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendAccepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /internal/notify/batch:
    post:
      tags: [Send]
      summary: Массовая отправка уведомлений
      description: >
        Добавляет пачку сообщений в очередь. Идемпотентность распространяется на всю пачку по одному ключу:
        повтор с тем же Idempotence-Key вернёт те же сводные результаты.
      security:
        - internalAuth: []
      parameters:
        - $ref: '#/components/parameters/IdempotenceKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchSendRequest'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSendAccepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ======================== СТАТУСЫ ========================
  /internal/notify/status/{messageId}:
    get:
      tags: [Status]
      summary: Получить статус доставки по message_id
      security:
        - internalAuth: []
      parameters:
        - $ref: '#/components/parameters/MessageId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageStatus'
        '404':
          $ref: '#/components/responses/NotFound'

  /internal/notify/status:
    get:
      tags: [Status]
      summary: Поиск статусов по фильтрам (временной срез)
      security:
        - internalAuth: []
      parameters:
        - name: user_id
          in: query
          required: false
          schema: { type: string, format: uuid }
        - name: channel
          in: query
          required: false
          schema: { $ref: '#/components/schemas/Channel' }
        - name: template
          in: query
          required: false
          schema: { type: string }
        - name: since
          in: query
          required: false
          schema: { type: string, format: date-time }
        - name: limit
          in: query
          required: false
          schema: { type: integer, minimum: 1, maximum: 1000, default: 100 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/MessageStatus'

components:
  # ---------- Parameters ----------
  parameters:
    IdempotenceKey:
      name: Idempotence-Key
      in: header
      required: false
      description: >
        Ключ идемпотентности (UUID). Повторный вызов с тем же ключом вернёт прежний результат без дублей.
      schema: { type: string, format: uuid }
    MessageId:
      name: messageId
      in: path
      required: true
      schema: { type: string, format: uuid }

  # ---------- Security ----------
  securitySchemes:
    internalAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # ---------- Responses ----------
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotFound:
      description: Not Found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

  # ---------- Schemas ----------
  schemas:
    Channel:
      type: string
      enum: [telegram]
      example: telegram

    SendRequest:
      type: object
      required: [user_id, channel, template, params]
      properties:
        user_id: { type: string, format: uuid }
        channel: { $ref: '#/components/schemas/Channel' }
        template:
          type: string
          description: Код шаблона, например "payment.success", "purchase.locked".
        params:
          type: object
          additionalProperties: true
          description: Переменные для подстановки в шаблон.

    SendAccepted:
      type: object
      required: [message_id, status]
      properties:
        message_id: { type: string, format: uuid }
        status:
          type: string
          enum: [queued]
          example: queued

    BatchItem:
      type: object
      required: [user_id, channel, template, params]
      properties:
        user_id: { type: string, format: uuid }
        channel: { $ref: '#/components/schemas/Channel' }
        template: { type: string }
        params:
          type: object
          additionalProperties: true

    BatchSendRequest:
      type: object
      required: [items]
      properties:
        items:
          type: array
          maxItems: 1000
          items: { $ref: '#/components/schemas/BatchItem' }

    BatchSendAccepted:
      type: object
      required: [accepted, rejected]
      properties:
        accepted: { type: integer, minimum: 0 }
        rejected: { type: integer, minimum: 0 }
        errors:
          type: array
          items:
            type: object
            properties:
              index: { type: integer }
              error: { $ref: '#/components/schemas/Error' }

    DeliveryStatus:
      type: string
      enum: [queued, sending, delivered, failed]
      example: queued

    MessageStatus:
      type: object
      required: [message_id, user_id, channel, template, status, created_at]
      properties:
        message_id: { type: string, format: uuid }
        user_id: { type: string, format: uuid }
        channel: { $ref: '#/components/schemas/Channel' }
        template: { type: string }
        status: { $ref: '#/components/schemas/DeliveryStatus' }
        error:
          type: object
          nullable: true
          properties:
            code: { type: string }
            message: { type: string }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time, nullable: true }

    TemplateInfo:
      type: object
      required: [code, channel]
      properties:
        code:
          type: string
          example: payment.success
        channel:
          $ref: '#/components/schemas/Channel'
        description:
          type: string
          nullable: true

    Error:
      type: object
      required: [code, message]
      properties:
        code:
          type: string
          examples: [validation_error, unauthorized, not_found, template_not_found]
        message: { type: string }
        details: { type: object, additionalProperties: true }
